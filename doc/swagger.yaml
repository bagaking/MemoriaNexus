definitions:
  book.ReqAddItems:
    properties:
      item_ids:
        items:
          type: integer
        type: array
    type: object
  book.ReqCreateOrUpdateBook:
    properties:
      description:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  def.AttackResult:
    enum:
    - defeat
    - miss
    - hit
    - kill
    - complete
    type: string
    x-enum-varnames:
    - AttackDefeat
    - AttackMiss
    - AttackHit
    - AttackKill
    - AttackComplete
  def.DifficultyLevel:
    enum:
    - 1
    - 2
    - 3
    - 17
    - 18
    - 19
    - 33
    - 34
    - 35
    - 49
    - 50
    - 51
    - 65
    - 66
    - 67
    - 68
    type: integer
    x-enum-varnames:
    - NoviceNormal
    - NoviceAdvanced
    - NoviceChallenge
    - AmateurNormal
    - AmateurAdvanced
    - AmateurChallenge
    - ProfessionalNormal
    - ProfessionalAdvanced
    - ProfessionalChallenge
    - ExpertNormal
    - ExpertAdvanced
    - ExpertChallenge
    - MasterNormal
    - MasterAdvanced
    - MasterChallenge
    - MasterExtreme
  def.DungeonType:
    enum:
    - 1
    - 2
    - 33
    type: integer
    x-enum-comments:
      DungeonTypeCampaign: 战役地牢
      DungeonTypeEndless: 无尽地牢
      DungeonTypeInstance: 即时副本 (随机地牢)
    x-enum-varnames:
    - DungeonTypeCampaign
    - DungeonTypeEndless
    - DungeonTypeInstance
  def.ImportanceLevel:
    enum:
    - 1
    - 2
    - 3
    - 17
    - 18
    - 19
    - 20
    - 33
    - 34
    - 35
    - 36
    type: integer
    x-enum-varnames:
    - DomainGeneral
    - DomainKey
    - DomainEssential
    - AreaGeneral
    - AreaKey
    - AreaEssential
    - AreaMasterPiece
    - GlobalGeneral
    - GlobalKey
    - GlobalEssential
    - GlobalMasterPiece
  def.RecallIntervalLevel:
    type: object
  dto.Book:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  dto.Dungeon:
    properties:
      books:
        items:
          type: integer
        type: array
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      items:
        items:
          type: integer
        type: array
      rule:
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      tag_names:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        $ref: '#/definitions/def.DungeonType'
      updated_at:
        type: string
    type: object
  dto.DungeonMonster:
    properties:
      avatar:
        description: 怪物头像
        type: string
      created_at:
        type: string
      description:
        type: string
      difficulty:
        allOf:
        - $ref: '#/definitions/def.DifficultyLevel'
        description: Item -> DungeonMonster 单向同步
      dungeon_id:
        type: integer
      familiarity:
        description: 以下为宽表内容，为了加速查询
        type: integer
      importance:
        allOf:
        - $ref: '#/definitions/def.ImportanceLevel'
        description: Item -> DungeonMonster 单向同步
      item_id:
        type: integer
      name:
        type: string
      next_practice_at:
        description: 下次复习时间
        type: string
      practice_at:
        description: 用于 runtime
        type: string
      practice_count:
        description: 复习次数 (考虑到可能会有 merge 次数等逻辑，这里先用一个相对大的空间）
        type: integer
      source_id:
        description: 记录插入时来源，方便原路径修改删除等
        type: integer
      source_type:
        allOf:
        - $ref: '#/definitions/model.MonsterSource'
        description: system
      visibility:
        description: 以下为游戏性相关内容，由 AI 生成
        type: integer
    type: object
  dto.Item:
    properties:
      content:
        type: string
      created_at:
        type: string
      creator_id:
        type: integer
      difficulty:
        $ref: '#/definitions/def.DifficultyLevel'
      id:
        type: integer
      importance:
        $ref: '#/definitions/def.ImportanceLevel'
      tags:
        items:
          type: string
        type: array
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.Points:
    properties:
      cash:
        type: integer
      gem:
        type: integer
      vip_score:
        type: integer
    type: object
  dto.Profile:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      nickname:
        type: string
    type: object
  dto.RespBookCreate:
    properties:
      data:
        $ref: '#/definitions/dto.Book'
      message:
        type: string
    type: object
  dto.RespBookDelete:
    properties:
      data:
        type: integer
      message:
        type: string
    type: object
  dto.RespBookGet:
    properties:
      data:
        $ref: '#/definitions/dto.Book'
      message:
        type: string
    type: object
  dto.RespBookList:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.Book'
        type: array
      extra: {}
      limit:
        type: integer
      message:
        type: string
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.RespBookUpdate:
    properties:
      data:
        $ref: '#/definitions/dto.Book'
      message:
        type: string
    type: object
  dto.RespBooks:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.Book'
        type: array
      extra: {}
      limit:
        type: integer
      message:
        type: string
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.RespDungeon:
    properties:
      data:
        $ref: '#/definitions/dto.Dungeon'
      message:
        type: string
    type: object
  dto.RespDungeonList:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.Dungeon'
        type: array
      extra: {}
      limit:
        type: integer
      message:
        type: string
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.RespItemCreate:
    properties:
      data:
        $ref: '#/definitions/dto.Item'
      message:
        type: string
    type: object
  dto.RespItemDelete:
    properties:
      data:
        $ref: '#/definitions/dto.Item'
      message:
        type: string
    type: object
  dto.RespItemGet:
    properties:
      data:
        $ref: '#/definitions/dto.Item'
      message:
        type: string
    type: object
  dto.RespItemList:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.Item'
        type: array
      extra: {}
      limit:
        type: integer
      message:
        type: string
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.RespItemUpdate:
    properties:
      data:
        $ref: '#/definitions/dto.Item'
      message:
        type: string
    type: object
  dto.RespMonsterList:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.DungeonMonster'
        type: array
      extra: {}
      limit:
        type: integer
      message:
        type: string
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.RespPoints:
    properties:
      data:
        $ref: '#/definitions/dto.Points'
      message:
        type: string
    type: object
  dto.RespProfile:
    properties:
      data:
        $ref: '#/definitions/dto.Profile'
      message:
        type: string
    type: object
  dto.RespSettingsAdvance:
    properties:
      data:
        $ref: '#/definitions/dto.SettingsAdvance'
      message:
        type: string
    type: object
  dto.RespSettingsMemorization:
    type: object
  dto.RespTagList:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.Tag'
        type: array
      extra: {}
      limit:
        type: integer
      message:
        type: string
      offset:
        type: integer
      total:
        type: integer
    type: object
  dto.SettingsAdvance:
    properties:
      email_notifications:
        type: boolean
      language:
        type: string
      push_notifications:
        type: boolean
      theme:
        type: string
    type: object
  dto.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  dto.Tag:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  dungeon.ReqAddDungeonBooks:
    properties:
      books:
        items:
          type: integer
        type: array
    type: object
  dungeon.ReqAddDungeonItems:
    properties:
      items:
        items:
          type: integer
        type: array
    type: object
  dungeon.ReqAddDungeonTags:
    properties:
      tag_names:
        items:
          type: string
        type: array
    type: object
  dungeon.ReqCreateDungeon:
    properties:
      books:
        items:
          type: integer
        type: array
      description:
        type: string
      items:
        items:
          type: integer
        type: array
      rule:
        type: string
      tag_ids:
        items:
          type: integer
        type: array
      tag_names:
        items:
          type: string
        type: array
      title:
        type: string
      type:
        $ref: '#/definitions/def.DungeonType'
    type: object
  dungeon.ReqRemoveDungeonBooks:
    properties:
      books:
        items:
          type: integer
        type: array
    type: object
  dungeon.ReqRemoveDungeonItems:
    properties:
      items:
        items:
          type: integer
        type: array
    type: object
  dungeon.ReqRemoveDungeonTags:
    properties:
      tags:
        items:
          type: integer
        type: array
    type: object
  dungeon.ReqReportMonsterResult:
    properties:
      monster_id:
        type: integer
      result:
        allOf:
        - $ref: '#/definitions/def.AttackResult'
        description: '"defeat", "miss", "hit", "kill", "complete"'
    type: object
  dungeon.ReqUpdateDungeon:
    properties:
      description:
        type: string
      rule:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/def.DungeonType'
    type: object
  item.ReqCreateItem:
    properties:
      book_ids:
        description: 用于接收一个或多个 BookID
        items:
          type: integer
        type: array
      content:
        type: string
      difficulty:
        allOf:
        - $ref: '#/definitions/def.DifficultyLevel'
        description: '难度，默认值为 NoviceNormal (0x01), todo: 考虑是否允许用户编辑，编辑后要引入写扩散'
      importance:
        allOf:
        - $ref: '#/definitions/def.ImportanceLevel'
        description: '重要程度，默认值为 DomainGeneral (0x01), todo: 考虑是否允许用户编辑'
      tags:
        description: 新增字段，用于接收一组 Tag 名称
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  item.ReqUpdateItem:
    properties:
      content:
        type: string
      difficulty:
        allOf:
        - $ref: '#/definitions/def.DifficultyLevel'
        description: 难度，默认值为 NoviceNormal (0x01)
      importance:
        allOf:
        - $ref: '#/definitions/def.ImportanceLevel'
        description: 重要程度，默认值为 DomainGeneral (0x01)
      tags:
        description: 新增字段
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  model.MonsterSource:
    enum:
    - 1
    - 2
    - 3
    type: integer
    x-enum-varnames:
    - MonsterSourceItem
    - MonsterSourceBook
    - MonsterSourceTag
  profile.ReqUpdateProfile:
    properties:
      avatar_url:
        type: string
      bio:
        type: string
      email:
        type: string
      nickname:
        type: string
    type: object
  profile.ReqUpdateUserSettingsAdvance:
    properties:
      email_notifications:
        type: boolean
      language:
        type: string
      push_notifications:
        type: boolean
      theme:
        type: string
    type: object
  profile.ReqUpdateUserSettingsMemorization:
    properties:
      difficulty_preference:
        type: integer
      quiz_mode:
        type: string
      review_interval:
        $ref: '#/definitions/def.RecallIntervalLevel'
    type: object
  utils.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
info:
  contact: {}
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Get a paginated list of books for the user.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of books
          schema:
            $ref: '#/definitions/dto.RespBooks'
      summary: Get list of books with pagination
      tags:
      - book
    post:
      consumes:
      - application/json
      description: Creates a new book and optionally associates tags with it
      parameters:
      - description: Book creation data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/book.ReqCreateOrUpdateBook'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created book
          schema:
            $ref: '#/definitions/dto.RespBookCreate'
        "400":
          description: Invalid parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a book
      tags:
      - book
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a book from the system by ID.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted book
          schema:
            $ref: '#/definitions/dto.RespBookDelete'
      summary: Delete a book
      tags:
      - book
    get:
      consumes:
      - application/json
      description: Get detailed information about a book.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved book
          schema:
            $ref: '#/definitions/dto.RespBookGet'
      summary: Get a book by ID
      tags:
      - book
    put:
      consumes:
      - application/json
      description: Update information for an existing book.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book update data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/book.ReqCreateOrUpdateBook'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated book
          schema:
            $ref: '#/definitions/dto.RespBookUpdate'
      summary: Update book information
      tags:
      - book
  /books/{id}/items:
    delete:
      consumes:
      - application/json
      description: Remove a list of items from the specified book.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comma-separated list of item IDs to remove
        in: query
        name: item_ids
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: items removed from book successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to remove book items
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Remove items from a book
      tags:
      - book
    get:
      consumes:
      - application/json
      description: Get a paginated list of items for the book.
      parameters:
      - default: 1
        description: Page number for pagination
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: items of the book found
          schema:
            $ref: '#/definitions/dto.RespItemList'
      summary: Get item list of books with pagination
      tags:
      - book
    post:
      consumes:
      - application/json
      description: Add a list of items to the specified book.
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of item IDs to add
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/book.ReqAddItems'
      produces:
      - application/json
      responses:
        "200":
          description: items added to book successfully
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Failed to upsert book items
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Add items to a book
      tags:
      - book
  /dungeon/campaigns/{id}/monsters:
    get:
      description: 获取复习计划的所有Monsters
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      - description: Sort by field (familiarity, difficulty, importance)
        in: query
        name: sort_by
        required: true
        type: string
      - description: page for pagination
        in: query
        name: page
        required: true
        type: integer
      - description: Limit for pagination
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monsters
          schema:
            $ref: '#/definitions/dto.RespMonsterList'
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all the monsters of a specific campaign dungeon
      tags:
      - dungeon
  /dungeon/campaigns/{id}/practice:
    get:
      description: 从 Campaign Dungeon 中提取一些要复习的 Monster 缓存到本地
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      - description: Number of monsters to fetch
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved monsters
          schema:
            $ref: '#/definitions/dto.RespMonsterList'
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get monsters for review
      tags:
      - dungeon
  /dungeon/campaigns/{id}/submit:
    post:
      consumes:
      - application/json
      description: 上报复习计划的Monster结果
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      - description: UserMonster result data
        in: body
        name: result
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqReportMonsterResult'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully reported result
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Dungeon or UserMonster not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Report the result of a specific monster recall
      tags:
      - dungeon
  /dungeon/dungeons:
    get:
      description: 获取复习计划列表
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved dungeons
          schema:
            items:
              $ref: '#/definitions/dto.RespDungeonList'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get the list of dungeon campaigns
      tags:
      - dungeon
    post:
      consumes:
      - application/json
      description: 创建新的复习计划
      parameters:
      - description: Dungeon campaign data
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqCreateDungeon'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created dungeon
          schema:
            $ref: '#/definitions/dto.RespDungeon'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new dungeon campaign
      tags:
      - dungeon
  /dungeon/dungeons/{id}:
    delete:
      description: 删除复习计划
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Successfully deleted dungeon
          schema:
            $ref: '#/definitions/dto.RespDungeon'
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete a specific dungeon campaign
      tags:
      - dungeon
    get:
      description: 获取复习计划详情
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved dungeon
          schema:
            $ref: '#/definitions/dto.RespDungeon'
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get the details of a specific dungeon campaign
      tags:
      - dungeon
    put:
      consumes:
      - application/json
      description: 更新复习计划
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      - description: Dungeon campaign data
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqUpdateDungeon'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated dungeon
          schema:
            $ref: '#/definitions/dto.RespDungeon'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update a specific dungeon campaign
      tags:
      - dungeon
  /dungeon/dungeons/{id}/books:
    delete:
      consumes:
      - application/json
      description: 删除复习计划的 Books
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: string
      - description: Dungeon books data
        in: body
        name: books
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqRemoveDungeonBooks'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Dungeon or Book not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Remove books from a specific dungeon
      tags:
      - dungeon
    get:
      description: 获取复习计划的 Books
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get the books of a specific dungeon
      tags:
      - dungeon
    post:
      consumes:
      - application/json
      description: 向现有复习计划添加书籍
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: string
      - description: Books to add
        in: body
        name: books
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqAddDungeonBooks'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RespDungeon'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Add books to an existing dungeon
      tags:
      - dungeon
  /dungeon/dungeons/{id}/items:
    delete:
      consumes:
      - application/json
      description: 删除复习计划的 Items
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: string
      - description: Dungeon items data
        in: body
        name: items
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqRemoveDungeonItems'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Dungeon or Item not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Remove items from a specific dungeon
      tags:
      - dungeon
    get:
      description: 获取复习计划的 Items
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get the items of a specific dungeon
      tags:
      - dungeon
    post:
      consumes:
      - application/json
      description: 向现有复习计划添加学习材料
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: string
      - description: Items to add
        in: body
        name: items
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqAddDungeonItems'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RespDungeon'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Add items to an existing dungeon
      tags:
      - dungeon
  /dungeon/dungeons/{id}/tags:
    delete:
      consumes:
      - application/json
      description: 删除复习计划的 TagNames
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: string
      - description: Dungeon tags data
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqRemoveDungeonTags'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Dungeon or Tag not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Remove tags from a specific dungeon
      tags:
      - dungeon
    get:
      description: 获取复习计划的 TagNames
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: integer
            type: array
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get the tags of a specific dungeon
      tags:
      - dungeon
    post:
      consumes:
      - application/json
      description: 向现有复习计划添加标签
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: string
      - description: Tags to add
        in: body
        name: tags
        required: true
        schema:
          $ref: '#/definitions/dungeon.ReqAddDungeonTags'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RespDungeon'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Add tags to an existing dungeon
      tags:
      - dungeon
  /dungeon/endless/{id}/monsters:
    get:
      description: 获取复习计划的所有Monsters及其关联的 Items, Books, TagNames
      parameters:
      - description: Dungeon ID
        in: path
        name: id
        required: true
        type: integer
      - description: Offset for pagination
        in: query
        name: offset
        required: true
        type: integer
      - description: Limit for pagination
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.RespMonsterList'
        "404":
          description: Dungeon not found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get all the monsters of a specific endless dungeon with associations
      tags:
      - dungeon
  /items:
    get:
      consumes:
      - application/json
      description: Get a list of items for the user with optional filters for book
        and type and support for pagination.
      parameters:
      - description: User ID
        in: query
        name: user_id
        type: integer
      - description: Type of item
        in: query
        name: type
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved items
          schema:
            $ref: '#/definitions/dto.RespItemList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get a list of items with optional filters
      tags:
      - item
    post:
      consumes:
      - application/json
      description: Create a new item in the system with optional book affiliations
        and tags.
      parameters:
      - description: Item creation data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/item.ReqCreateItem'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created item with books and tags
          schema:
            $ref: '#/definitions/dto.RespItemCreate'
        "400":
          description: Bad Request if too many books or tags, or bad data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Create a new item
      tags:
      - item
  /items/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an item from the system by ID.
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted item
          schema:
            $ref: '#/definitions/dto.RespItemDelete'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Delete an item
      tags:
      - item
    get:
      consumes:
      - application/json
      description: Get detailed information about an item, including its tags.
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved item with tags
          schema:
            $ref: '#/definitions/dto.RespItemGet'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Get an item by ID
      tags:
      - item
    put:
      consumes:
      - application/json
      description: Update an item's type, content, or associated tags.
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: integer
      - description: Item update data
        in: body
        name: item
        required: true
        schema:
          $ref: '#/definitions/item.ReqUpdateItem'
      produces:
      - application/json
      responses:
        "200":
          description: the updater
          schema:
            $ref: '#/definitions/dto.RespItemUpdate'
        "400":
          description: Bad Request with invalid item ID or update data
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error with failing to update the item
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Update an item
      tags:
      - item
  /items/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to create multiple items in the system.
      parameters:
      - description: File containing items data, support csv and toml file
        in: formData
        name: file
        required: true
        type: file
      - description: Book ID
        in: query
        name: book_id
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created items from file
          schema:
            $ref: '#/definitions/dto.RespItemList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      summary: Upload items from a file
      tags:
      - item
  /profile/me:
    get:
      consumes:
      - application/json
      description: Retrieves the profile information for the user who made the request.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user profile
          schema:
            $ref: '#/definitions/dto.RespProfile'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get the current user's profile
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: Updates the profile information for the user who made the request.
      parameters:
      - description: User profile update info
        in: body
        name: profile
        required: true
        schema:
          $ref: '#/definitions/profile.ReqUpdateProfile'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            $ref: '#/definitions/dto.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user profile
      tags:
      - profile
  /profile/points:
    get:
      description: Retrieves points information for the current user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user points
          schema:
            $ref: '#/definitions/dto.RespPoints'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user points
      tags:
      - profile
  /profile/settings/advance:
    get:
      description: Retrieves advanced settings information for the current user.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user advanced settings
          schema:
            $ref: '#/definitions/dto.RespSettingsAdvance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user advanced settings
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: Updates advanced settings for the authenticated user.
      parameters:
      - description: User advanced settings update info
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/profile.ReqUpdateUserSettingsAdvance'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user advanced settings
          schema:
            $ref: '#/definitions/dto.RespSettingsAdvance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user advanced settings
      tags:
      - profile
  /profile/settings/memorization:
    get:
      description: Retrieves settings information for the user who made the request.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user settings
          schema:
            $ref: '#/definitions/dto.RespSettingsMemorization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user settings
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: Updates the settings for the user who made the request.
      parameters:
      - description: User settings update info
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/profile.ReqUpdateUserSettingsMemorization'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user settings
          schema:
            $ref: '#/definitions/dto.RespSettingsMemorization'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Update user settings
      tags:
      - profile
  /tags:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all tags.
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved tags
          schema:
            items:
              $ref: '#/definitions/dto.RespTagList'
            type: array
      summary: Get all tags
      tags:
      - tag
  /tags/{id}/books:
    get:
      consumes:
      - application/json
      description: Retrieves a list of books associated with a specific tag id.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved books
          schema:
            items:
              $ref: '#/definitions/dto.RespBookList'
            type: array
      summary: Get books by tag
      tags:
      - tag
  /tags/{id}/items:
    get:
      consumes:
      - application/json
      description: Retrieves a list of items associated with a specific tag.
      parameters:
      - description: Tag ID
        in: path
        name: id
        required: true
        type: integer
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved items
          schema:
            items:
              $ref: '#/definitions/dto.RespItemList'
            type: array
      summary: Get items by tag
      tags:
      - tag
  /tags/name/{name}:
    get:
      consumes:
      - application/json
      description: Retrieves a tag by its name.
      parameters:
      - description: Tag Name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved tag
          schema:
            $ref: '#/definitions/dto.Tag'
      summary: Get tag by name
      tags:
      - tag
  /tags/name/{name}/books:
    get:
      consumes:
      - application/json
      description: Retrieves a list of books associated with a specific tag name.
      parameters:
      - description: Tag Name
        in: path
        name: name
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved books
          schema:
            items:
              $ref: '#/definitions/dto.RespBookList'
            type: array
      summary: Get books by tag name
      tags:
      - tag
  /tags/name/{name}/items:
    get:
      consumes:
      - application/json
      description: Retrieves a list of items associated with a specific tag name.
      parameters:
      - description: Tag Name
        in: path
        name: name
        required: true
        type: string
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      - description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved items
          schema:
            items:
              $ref: '#/definitions/dto.RespItemList'
            type: array
      summary: Get items by tag name
      tags:
      - tag
swagger: "2.0"
